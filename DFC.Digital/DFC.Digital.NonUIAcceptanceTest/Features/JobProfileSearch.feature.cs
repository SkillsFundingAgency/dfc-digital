// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.Digital.NonUIAcceptanceTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "JobProfile")]
    public partial class ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature : Xunit.IClassFixture<ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "JobProfileSearch.feature"
#line hidden
        
        public ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature(ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List job profiles based upon relevance to the \"search term\" entered", null, ProgrammingLanguage.CSharp, new string[] {
                        "JobProfile"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-5740] Search phrase that matches alternative title on job profile should be " +
            "top of the results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-5740] Search phrase that matches alternative title on job profile should be " +
            "top of the results")]
        public virtual void DFC_5740SearchPhraseThatMatchesAlternativeTitleOnJobProfileShouldBeTopOfTheResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-5740] Search phrase that matches alternative title on job profile should be " +
                    "top of the results", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 5
 testRunner.Given("I have a list of all job profile with titles and alternative title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("I search by each alternative title for each of the  job profiles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("all the results returned should have the job profile with the matching alternativ" +
                    "e title in the first position.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-5220] Search phrase that matches title on job profile should be top of the r" +
            "esults")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-5220] Search phrase that matches title on job profile should be top of the r" +
            "esults")]
        public virtual void DFC_5220SearchPhraseThatMatchesTitleOnJobProfileShouldBeTopOfTheResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-5220] Search phrase that matches title on job profile should be top of the r" +
                    "esults", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
 testRunner.Given("I have a list of all job profile with titles and alternative title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.When("I search by each title for each of the job profiles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("all the results returned should have the job profile with the matching title in t" +
                    "he first position.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
