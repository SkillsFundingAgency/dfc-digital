// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.Digital.Service.AzureSearch.IntegrationTests.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "JobProfileByCategory")]
    public partial class ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature : Xunit.IClassFixture<ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "JobProfileByCategorySearch.feature"
#line hidden
        
        public ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature(ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List job profiles by the catogories that they are in.", null, ProgrammingLanguage.CSharp, new string[] {
                        "JobProfileByCategory"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-275] List job profiles by the catogories that they are in.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles by the catogories that they are in.")]
        [Xunit.TraitAttribute("Description", "[DFC-275] List job profiles by the catogories that they are in.")]
        public virtual void DFC_275ListJobProfilesByTheCatogoriesThatTheyAreIn_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-275] List job profiles by the catogories that they are in.", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "JobProfileCategories"});
            table3.AddRow(new string[] {
                        "A_DFC_275_Title_One",
                        "DFC_275_CategoryOne"});
            table3.AddRow(new string[] {
                        "B_DFC_275_Title_Two",
                        "DFC_275_CategoryOne"});
            table3.AddRow(new string[] {
                        "C_DFC_275_Title_Three",
                        "DFC_275_CategoryOne,DFC_275_CategoryTwo"});
            table3.AddRow(new string[] {
                        "D_DFC_275_Title_Four",
                        "DFC_275_CategoryTwo"});
#line 6
testRunner.Given("the following job profiles in catogories  exist:", ((string)(null)), table3, "Given ");
#line 12
testRunner.When("I filter by the category \'DFC_275_CategoryOne\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
testRunner.Then("the number of job profiles returned is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table4.AddRow(new string[] {
                        "A_DFC_275_Title_One"});
            table4.AddRow(new string[] {
                        "B_DFC_275_Title_Two"});
            table4.AddRow(new string[] {
                        "C_DFC_275_Title_Three"});
#line 14
testRunner.And("the job profiles are listed in the following order", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ListJobProfilesByTheCatogoriesThatTheyAreIn_Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
