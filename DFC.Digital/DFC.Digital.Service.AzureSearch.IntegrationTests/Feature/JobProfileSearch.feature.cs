// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.Digital.Service.AzureSearch.IntegrationTests.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "JobProfile")]
    public partial class ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature : Xunit.IClassFixture<ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "JobProfileSearch.feature"
#line hidden
        
        public ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature(ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List job profiles based upon relevance to the \"search term\" entered", "[DFC-31] List job profiles based upon relevance to the \"search term\" entered\r\n[DF" +
                    "C-31 - A1] Job profiles which possess a <Title> or an <AltTitle> which exactly m" +
                    "atches the \"search term\" should be listed first in the list\r\n\t1. <Title> and <Al" +
                    "tTitle> are equivalent in weighting. (i.e. if the term exactly matches either <T" +
                    "itle> or <AltTitle> these are considered equivalent - see [A3])\r\n\t2. The <Title>" +
                    " and <AltTitle> should be unique (i.e. it doesn\'t make sense if the same <Title>" +
                    " or <AltTitle> is used across different profiles - although this isn\'t prohibite" +
                    "d.)\r\n[DFC-31 - A2] Job profiles which possess a <Title> or an <AltTitle> which c" +
                    "ontains the \"search term\" should be listed second in the list\r\n[DFC-31 - A3] Job" +
                    " profiles which satisfy the same condition, to the same level, are not listed in" +
                    " any particular order\r\n\r\n[DFC-164] I want to be able to see Job Profile/s in my " +
                    "search results\r\n\t[DFC-164 - A1] Job profiles which possess a <Title> which exact" +
                    "ly matches the \"search term\" should be listed in the list\r\n\t[DFC-336] Bugfix - U" +
                    "ser uses invalid characters as search term should not see anything\r\n\t[DFC-349] B" +
                    "ugfix - User search by a term that contains more than 50 results\r\n\r\n\t[DFC-167] N" +
                    "avigate using the Next & Previous hyperlinks\r\n\t[DFC-167 - A1] The maximum number" +
                    " of results shown on a page should be limited to the <page limit> (i.e. 10)\r\nCov" +
                    "ered in UI - [DFC-167 - A2] Only display the \"Next\" pagination control if the la" +
                    "st result is NOT shown on the page\r\nCovered in UI - [DFC-167 - A3] Only display " +
                    "the \"Previous\" pagination control if the first result is NOT shown on the page\r\n" +
                    "Covered in UI - [DFC-167 - A4] The \"Next\" pagination control design should match" +
                    " the prototype and contain the following elements: \"Next \" <current page number>" +
                    "+1 \" of \" <total page number>\r\nCovered in UI - [DFC-167 - A5] The \"Previous\" pag" +
                    "ination control design should match the prototype and contain the following elem" +
                    "ents: \"Previous \" <current page number>-1 \" of \" <total page number>\r\nCovered in" +
                    " UI - [DFC-167 - A6] Clicking the \"Next\" pagination control should redirect the " +
                    "user to the next page of the search results\r\nCovered in UI - [DFC-167 - A7] Clic" +
                    "king the \"Previous\" pagination control should redirect the user to the previous " +
                    "page of the search results", ProgrammingLanguage.CSharp, new string[] {
                        "JobProfile"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
            "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
            " (i.e. 10)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
            "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
            " (i.e. 10)")]
        [Xunit.InlineDataAttribute("DFC-167-A1-1-1", "3", new string[0])]
        [Xunit.InlineDataAttribute("DFC-167-A1-1-2", "10", new string[0])]
        public virtual void DFC_167_A1_1TheNumberOfJobProfilesDisplayedEqualsTheTotalNumberOfResultsIfTheTotalNumberOfResultsIsLessThanOrEqualToThePageLimitI_E_10(string searchTerm, string numberOfResults, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
                    "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
                    " (i.e. 10)", null, exampleTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
 testRunner.Given(string.Format("there are \'{0}\' profiles which have a Title of \'{1}\'", numberOfResults, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the number of job profiles shown on the page is less than or equal to \'10\'. (i.e." +
                    " the page limit)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
            "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
            "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)")]
        [Xunit.InlineDataAttribute("DFC-167-A1-2-1", "11", new string[0])]
        [Xunit.InlineDataAttribute("DFC-167-A1-2-2", "101", new string[0])]
        public virtual void DFC_167_A1_2TheNumberOfJobProfilesDisplayedEqualsThePageLimitIfTheTotalNumberOfResultsIsGreaterThanThePageLimitI_E_10(string searchTerm, string numberOfResults, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
                    "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)", null, exampleTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
 testRunner.Given(string.Format("there are \'{0}\' profiles which have a Title of \'{1}\'", numberOfResults, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the number of job profiles shown on the page is equal to \'10\'. (i.e. the page lim" +
                    "it)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[A1] User uses a search term which contains <Title> on profile(s)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[A1] User uses a search term which contains <Title> on profile(s)")]
        public virtual void A1UserUsesASearchTermWhichContainsTitleOnProfileS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[A1] User uses a search term which contains <Title> on profile(s)", null, ((string[])(null)));
#line 140
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table1.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table1.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table1.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table1.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table1.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table1.AddRow(new string[] {
                        "Children nurse",
                        ""});
            table1.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
#line 141
  testRunner.Given("the following job profiles exist:", ((string)(null)), table1, "Given ");
#line 150
  testRunner.When("I search using the search term \'Nurse\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
  testRunner.Then("the result list will contain \'4\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table2.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table2.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table2.AddRow(new string[] {
                        "Children nurse",
                        ""});
            table2.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
#line 152
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
            "ltTitle> on mutliple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
            "ltTitle> on mutliple profiles")]
        public virtual void DFC_31_A1A3_1UserUsesASearchTermWhichExactlyMatchesTitleOrAltTitleOnMutlipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
                    "ltTitle> on mutliple profiles", null, ((string[])(null)));
#line 161
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table3.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table3.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician"});
            table3.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table3.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
            table3.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 163
  testRunner.Given("the following job profiles exist:", ((string)(null)), table3, "Given ");
#line 170
  testRunner.When("I search using the search term \'Stagehand\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table4.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician"});
            table4.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
#line 172
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
            "n a single profile")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
            "n a single profile")]
        public virtual void DFC_31_A2_1UserUsesASearchTermWhichIsContainedWithinTheTitleOnASingleProfile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
                    "n a single profile", null, ((string[])(null)));
#line 179
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table5.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table5.AddRow(new string[] {
                        "Aerospace engineering technician",
                        ""});
            table5.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 180
  testRunner.Given("the following job profiles exist:", ((string)(null)), table5, "Given ");
#line 185
  testRunner.When("I search using the search term \'Aerospace\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
  testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table6.AddRow(new string[] {
                        "Aerospace engineering technician",
                        ""});
#line 187
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
            "> on a single profile")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
            "> on a single profile")]
        public virtual void DFC_31_A2_2UserUsesASearchTermWhichIsContainedWithinTheAltTitleOnASingleProfile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
                    "> on a single profile", null, ((string[])(null)));
#line 191
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table7.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table7.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician"});
            table7.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 192
  testRunner.Given("the following job profiles exist:", ((string)(null)), table7, "Given ");
#line 197
  testRunner.When("I search using the search term \'Shipbuilding\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
  testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table8.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician"});
#line 199
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
            "e> on multiple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
            "e> on multiple profiles")]
        public virtual void DFC_31_A2A3_1UserUsesASearchTermWhichIsContainedWithinTheTitleOnMultipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
                    "e> on multiple profiles", null, ((string[])(null)));
#line 204
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table9.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table9.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table9.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table9.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table9.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 205
  testRunner.Given("the following job profiles exist:", ((string)(null)), table9, "Given ");
#line 212
  testRunner.When("I search using the search term \'Veterinary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 213
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table10.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table10.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
#line 214
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
            "itle> on multiple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
            "itle> on multiple profiles")]
        public virtual void DFC_31_A2A3_2UserUsesASearchTermWhichIsContainedWithinTheAltTitleOnMultipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
                    "itle> on multiple profiles", null, ((string[])(null)));
#line 219
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table11.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table11.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table11.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table11.AddRow(new string[] {
                        "Zookeeper",
                        "Keeper, animal keeper"});
            table11.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 220
  testRunner.Given("the following job profiles exist:", ((string)(null)), table11, "Given ");
#line 227
  testRunner.When("I search using the search term \'animal\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table12.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table12.AddRow(new string[] {
                        "Zookeeper",
                        "Keeper, animal keeper"});
#line 229
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
            "e> OR <AltTitle> on DIFFERENT profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
            "e> OR <AltTitle> on DIFFERENT profiles")]
        public virtual void DFC_31_A2A3_3UserUsesASearchTermWhichIsContainedWithinTheTitleORAltTitleOnDIFFERENTProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
                    "e> OR <AltTitle> on DIFFERENT profiles", null, ((string[])(null)));
#line 234
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table13.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table13.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table13.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 235
  testRunner.Given("the following job profiles exist:", ((string)(null)), table13, "Given ");
#line 248
  testRunner.When("I search using the search term \'technician\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
  testRunner.Then("the result list will contain \'8\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table14.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table14.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table14.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table14.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 250
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
            "s contained within the <AltTitle> on DIFFERENT profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
            "s contained within the <AltTitle> on DIFFERENT profiles")]
        public virtual void DFC_31_A1A2_1UserUsesASearchTermWhichExactlyMatchesTitleANDIsContainedWithinTheAltTitleOnDIFFERENTProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
                    "s contained within the <AltTitle> on DIFFERENT profiles", null, ((string[])(null)));
#line 261
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table15.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table15.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table15.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table15.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
            table15.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 262
  testRunner.Given("the following job profiles exist:", ((string)(null)), table15, "Given ");
#line 269
  testRunner.When("I search using the search term \'counsellor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 270
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table16.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table16.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
#line 271
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
            " anything")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
            " anything")]
        [Xunit.InlineDataAttribute("*", "10", new string[0])]
        [Xunit.InlineDataAttribute("Nurs?", "4", new string[0])]
        [Xunit.InlineDataAttribute("Nurse^3", "0", new string[0])]
        [Xunit.InlineDataAttribute("+Profile +Job", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurs~", "4", new string[0])]
        [Xunit.InlineDataAttribute("/[mh]otel/", "0", new string[0])]
        public virtual void DFC_31_B1Bugfix_UserUsesInvalidCharactersAsSearchTermShouldNotSeeAnything(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
                    " anything", null, exampleTags);
#line 300
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table17.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table17.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table17.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table17.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table17.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table17.AddRow(new string[] {
                        "General practitioner (GP)",
                        "Doc"});
            table17.AddRow(new string[] {
                        "Hotel based job",
                        ""});
            table17.AddRow(new string[] {
                        "Motel based job",
                        ""});
            table17.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
#line 301
 testRunner.Given("the following job profiles exist:", ((string)(null)), table17, "Given ");
#line 312
testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
            "m should no longer impact results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
            "m should no longer impact results")]
        [Xunit.InlineDataAttribute("Nurse !Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse - Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse + Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse OR Profile", "7", new string[0])]
        [Xunit.InlineDataAttribute("Profile && Job", "5", new string[0])]
        [Xunit.InlineDataAttribute("Profile & Job", "5", new string[0])]
        [Xunit.InlineDataAttribute("Profile || Job", "5", new string[0])]
        [Xunit.InlineDataAttribute("Veterinary AND nurse", "1", new string[0])]
        [Xunit.InlineDataAttribute("(GP)", "1", new string[0])]
        [Xunit.InlineDataAttribute("Co-ordinator", "2", new string[0])]
        public virtual void DFC_31_B1_2Bugfix_UserUsesNon_AlphabeticCharactersWithinSearchTermShouldNoLongerImpactResults(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
                    "m should no longer impact results", null, exampleTags);
#line 323
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table18.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table18.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table18.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table18.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table18.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table18.AddRow(new string[] {
                        "General practitioner (GP)",
                        "Doc"});
            table18.AddRow(new string[] {
                        "Hotel based job",
                        ""});
            table18.AddRow(new string[] {
                        "Motel based job",
                        ""});
            table18.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
            table18.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
            table18.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
#line 324
 testRunner.Given("the following job profiles exist:", ((string)(null)), table18, "Given ");
#line 337
testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 338
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
            ") is causing \'Server error\'")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
            ") is causing \'Server error\'")]
        [Xunit.InlineDataAttribute("Children\'s", "2", new string[0])]
        public virtual void DFC_1128Bugfix_PerformingASearchWithTextWhichContainsAnApostropheIsCausingServerError(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
                    ") is causing \'Server error\'", null, exampleTags);
#line 352
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table19.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table19.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
            table19.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table19.AddRow(new string[] {
                        "Children nurse",
                        ""});
#line 353
 testRunner.Given("the following job profiles exist:", ((string)(null)), table19, "Given ");
#line 359
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
            "ver Error\" (A potentially dangerous Request.Form value was detected)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
            "ver Error\" (A potentially dangerous Request.Form value was detected)")]
        [Xunit.InlineDataAttribute("<Dfc340\'s DFC340>", "1", new string[0])]
        public virtual void DFC_340BugfixPerformingASearchWithTextWithinAAndCausesAServerErrorAPotentiallyDangerousRequest_FormValueWasDetected(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
                    "ver Error\" (A potentially dangerous Request.Form value was detected)", null, exampleTags);
#line 365
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table20.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table20.AddRow(new string[] {
                        "DFC340\'s DFC340",
                        ""});
            table20.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
#line 366
 testRunner.Given("the following job profiles exist:", ((string)(null)), table20, "Given ");
#line 371
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 372
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1572] Bugfix - Search term contains \"-\" should return results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1572] Bugfix - Search term contains \"-\" should return results")]
        public virtual void DFC_1572Bugfix_SearchTermContains_ShouldReturnResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1572] Bugfix - Search term contains \"-\" should return results", null, ((string[])(null)));
#line 377
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table21.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
            table21.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
            table21.AddRow(new string[] {
                        "Last-Job Profile",
                        "Last-Job-Profile"});
#line 378
  testRunner.Given("the following job profiles exist:", ((string)(null)), table21, "Given ");
#line 383
  testRunner.When("I search using the search term \'co-o\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 384
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table22.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
            table22.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
#line 385
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-349] Bugfix - User search by a term that contains more than 50 results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-349] Bugfix - User search by a term that contains more than 50 results")]
        [Xunit.InlineDataAttribute("Everything", "1000", new string[0])]
        public virtual void DFC_349Bugfix_UserSearchByATermThatContainsMoreThan50Results(string searchTerm, string countOfDummies, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-349] Bugfix - User search by a term that contains more than 50 results", null, exampleTags);
#line 391
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 392
  testRunner.Given(string.Format("that \'{0}\' job profiles exist with \'{1}\':", countOfDummies, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 393
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 394
  testRunner.Then(string.Format("the result count should match \'{0}\'", countOfDummies), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1635 - A1] Match with data that has single Keyword only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1635 - A1] Match with data that has single Keyword only")]
        public virtual void DFC_1635_A1MatchWithDataThatHasSingleKeywordOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1635 - A1] Match with data that has single Keyword only", null, ((string[])(null)));
#line 401
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table23.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table23.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 402
 testRunner.Given("the following job profiles exist:", ((string)(null)), table23, "Given ");
#line 406
 testRunner.When("I search using the search term \'engineerkw\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 407
 testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table24.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 408
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1635 - A2] Match with data that has multiple Keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1635 - A2] Match with data that has multiple Keywords")]
        public virtual void DFC_1635_A2MatchWithDataThatHasMultipleKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1635 - A2] Match with data that has multiple Keywords", null, ((string[])(null)));
#line 413
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table25.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table25.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 414
 testRunner.Given("the following job profiles exist:", ((string)(null)), table25, "Given ");
#line 418
 testRunner.When("I search using the search term \'nailingtk, technicaltk\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 419
 testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table26.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
#line 420
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
            "ults")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
            "ults")]
        public virtual void DFC_1495IWantToSeeAllTheJobCategoriesTheJPIsFoundInInSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
                    "ults", null, ((string[])(null)));
#line 425
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "JobProfileCategoriesWithUrl"});
            table27.AddRow(new string[] {
                        "A_DFC_1495_Title_One",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryTwoURL|DFC_1495_Cat" +
                            "egoryTwo"});
            table27.AddRow(new string[] {
                        "B_DFC_1495_Title_Two",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryThreeURL|DFC_1495_C" +
                            "ategoryThree"});
            table27.AddRow(new string[] {
                        "C_DFC_1495_Title_Three",
                        "DFC_1495_CategoryTwoURL|DFC_1495_CategoryTwo"});
#line 426
testRunner.Given("the following job profiles exist:", ((string)(null)), table27, "Given ");
#line 431
testRunner.When("I search using the search term \'DFC_1495\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "JobProfileCategoriesWithUrl"});
            table28.AddRow(new string[] {
                        "A_DFC_1495_Title_One",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryTwoURL|DFC_1495_Cat" +
                            "egoryTwo"});
            table28.AddRow(new string[] {
                        "B_DFC_1495_Title_Two",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryThreeURL|DFC_1495_C" +
                            "ategoryThree"});
            table28.AddRow(new string[] {
                        "C_DFC_1495_Title_Three",
                        "DFC_1495_CategoryTwoURL|DFC_1495_CategoryTwo"});
#line 432
testRunner.Then("the profiles are listed in no specific order:", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
            "e\' with equal search weight.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
            "e\' with equal search weight.")]
        public virtual void DFC_1987_A1JPIsTaggedByJobProfileSpecialismAndHiddenAlternativeTitleWithEqualSearchWeight_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
                    "e\' with equal search weight.", null, ((string[])(null)));
#line 439
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table29.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table29.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
            table29.AddRow(new string[] {
                        "Technologist",
                        "",
                        "engineerhat",
                        ""});
#line 440
 testRunner.Given("the following job profiles exist:", ((string)(null)), table29, "Given ");
#line 445
testRunner.When("I search using the search term \'engineerhat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 446
 testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table30.AddRow(new string[] {
                        "Technologist",
                        "",
                        "engineerhat",
                        ""});
            table30.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 447
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-5229 - (DFC-31-A1, A2 - 2)] User uses a search term whose root exactly match" +
            "es the searchable fields on different profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-5229 - (DFC-31-A1, A2 - 2)] User uses a search term whose root exactly match" +
            "es the searchable fields on different profiles")]
        public virtual void DFC_5229_DFC_31_A1A2_2UserUsesASearchTermWhoseRootExactlyMatchesTheSearchableFieldsOnDifferentProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-5229 - (DFC-31-A1, A2 - 2)] User uses a search term whose root exactly match" +
                    "es the searchable fields on different profiles", null, ((string[])(null)));
#line 453
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table31.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table31.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table31.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table31.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table31.AddRow(new string[] {
                        "CBT practitioners",
                        "Talking therapist, behavioural therapist"});
            table31.AddRow(new string[] {
                        "Speech and language therapy assistant",
                        ""});
            table31.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table31.AddRow(new string[] {
                        "Therapist",
                        "UITest Exact Title"});
            table31.AddRow(new string[] {
                        "UITest Exact AltTitle",
                        "Therapist"});
            table31.AddRow(new string[] {
                        "Vocal Therapist",
                        "UITest Partial Title"});
            table31.AddRow(new string[] {
                        "UITest Partial AltTitle",
                        "Physical therapist"});
            table31.AddRow(new string[] {
                        "Hypnotherapist",
                        ""});
#line 455
  testRunner.Given("the following job profiles exist:", ((string)(null)), table31, "Given ");
#line 469
  testRunner.When("I search using the search term \'therapist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 470
  testRunner.Then("the result list will contain \'9\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table32.AddRow(new string[] {
                        "Therapist",
                        "UITest Exact Title"});
            table32.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table32.AddRow(new string[] {
                        "CBT practitioners",
                        "Talking therapist, behavioural therapist"});
            table32.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table32.AddRow(new string[] {
                        "UITest Exact AltTitle",
                        "Therapist"});
            table32.AddRow(new string[] {
                        "Vocal Therapist",
                        "UITest Partial Title"});
            table32.AddRow(new string[] {
                        "UITest Partial AltTitle",
                        "Physical therapist"});
            table32.AddRow(new string[] {
                        "Colon hydrotherapist",
                        ""});
            table32.AddRow(new string[] {
                        "Hypnotherapist",
                        ""});
#line 471
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-5954 - A1] JP is tagged by \'Overview\' and \'JobProfileCategories\' with equal " +
            "search weight.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-5954 - A1] JP is tagged by \'Overview\' and \'JobProfileCategories\' with equal " +
            "search weight.")]
        public virtual void DFC_5954_A1JPIsTaggedByOverviewAndJobProfileCategoriesWithEqualSearchWeight_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-5954 - A1] JP is tagged by \'Overview\' and \'JobProfileCategories\' with equal " +
                    "search weight.", null, ((string[])(null)));
#line 483
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview"});
            table33.AddRow(new string[] {
                        "Analytical textile technologist",
                        "",
                        "",
                        "",
                        "dfc5954",
                        ""});
            table33.AddRow(new string[] {
                        "Arboricultural officer",
                        "",
                        "",
                        "",
                        "",
                        "dfc5954"});
            table33.AddRow(new string[] {
                        "Children nurse",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 484
 testRunner.Given("the following job profiles exist:", ((string)(null)), table33, "Given ");
#line 490
testRunner.When("I search using the search term \'dfc5954\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 491
 testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview"});
            table34.AddRow(new string[] {
                        "Analytical textile technologist",
                        "",
                        "",
                        "",
                        "dfc5954",
                        ""});
            table34.AddRow(new string[] {
                        "Arboricultural officer",
                        "",
                        "",
                        "",
                        "",
                        "dfc5954"});
#line 492
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-5955 - A1] JP is tagged by \'CollegeRelevantSubjects | UniversityRelevantSubj" +
            "ects | ApprenticeshipRelevantSubjects | WYDDayToDayTasks | CareerPathAndProgress" +
            "ion\' with equal search weight.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-5955 - A1] JP is tagged by \'CollegeRelevantSubjects | UniversityRelevantSubj" +
            "ects | ApprenticeshipRelevantSubjects | WYDDayToDayTasks | CareerPathAndProgress" +
            "ion\' with equal search weight.")]
        public virtual void DFC_5955_A1JPIsTaggedByCollegeRelevantSubjectsUniversityRelevantSubjectsApprenticeshipRelevantSubjectsWYDDayToDayTasksCareerPathAndProgressionWithEqualSearchWeight_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-5955 - A1] JP is tagged by \'CollegeRelevantSubjects | UniversityRelevantSubj" +
                    "ects | ApprenticeshipRelevantSubjects | WYDDayToDayTasks | CareerPathAndProgress" +
                    "ion\' with equal search weight.", null, ((string[])(null)));
#line 498
   this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview",
                        "CollegeRelevantSubjects",
                        "UniversityRelevantSubjects",
                        "ApprenticeshipRelevantSubjects",
                        "WYDDayToDayTasks",
                        "CareerPathAndProgression"});
            table35.AddRow(new string[] {
                        "Print finisher",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Health promotion specialist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Screenwriter",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Tattooist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Architectural technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields"});
            table35.AddRow(new string[] {
                        "Garment technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        ""});
            table35.AddRow(new string[] {
                        "Critical care technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Leather technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Packaging technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Music promotions manager",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Analytical textile technologist",
                        "",
                        "",
                        "",
                        "dfc5954",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table35.AddRow(new string[] {
                        "Arboricultural officer",
                        "",
                        "",
                        "",
                        "",
                        "dfc5954",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 499
 testRunner.Given("the following job profiles exist:", ((string)(null)), table35, "Given ");
#line 513
testRunner.When("I search using the search term \'extrafields\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 514
 testRunner.Then("the result list will contain \'5\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview",
                        "CollegeRelevantSubjects",
                        "UniversityRelevantSubjects",
                        "ApprenticeshipRelevantSubjects",
                        "WYDDayToDayTasks",
                        "CareerPathAndProgression"});
            table36.AddRow(new string[] {
                        "Architectural technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields"});
            table36.AddRow(new string[] {
                        "Garment technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        ""});
            table36.AddRow(new string[] {
                        "Critical care technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "Leather technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        "",
                        ""});
            table36.AddRow(new string[] {
                        "Packaging technologist",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "extrafields",
                        "",
                        "",
                        "",
                        ""});
#line 515
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-8364 - A1] JP is tagged by \'WorkingPattern | WorkingPatternDetails | Minimum" +
            "Hours | MaximumHours | WorkingHoursDetails\' with equal search weight.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-8364 - A1] JP is tagged by \'WorkingPattern | WorkingPatternDetails | Minimum" +
            "Hours | MaximumHours | WorkingHoursDetails\' with equal search weight.")]
        public virtual void DFC_8364_A1JPIsTaggedByWorkingPatternWorkingPatternDetailsMinimumHoursMaximumHoursWorkingHoursDetailsWithEqualSearchWeight_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-8364 - A1] JP is tagged by \'WorkingPattern | WorkingPatternDetails | Minimum" +
                    "Hours | MaximumHours | WorkingHoursDetails\' with equal search weight.", null, ((string[])(null)));
#line 523
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview",
                        "CollegeRelevantSubjects",
                        "UniversityRelevantSubjects",
                        "ApprenticeshipRelevantSubjects",
                        "WydDayToDayTasks",
                        "CareerPathAndProgression",
                        "WorkingPattern",
                        "WorkingPatternDetails",
                        "MinimumHours",
                        "MaximumHours",
                        "WorkingHoursDetails"});
            table37.AddRow(new string[] {
                        "Actor",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "managing your own hours",
                        "30",
                        "40",
                        "a week"});
            table37.AddRow(new string[] {
                        "Barrister",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "managing your own hours",
                        "20",
                        "30",
                        "a week"});
            table37.AddRow(new string[] {
                        "Bailiff",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "managing your own hours",
                        "30",
                        "40",
                        "a week"});
            table37.AddRow(new string[] {
                        "Coroner",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "",
                        "0",
                        "0",
                        "a month"});
#line 524
 testRunner.Given("the following job profiles exist:", ((string)(null)), table37, "Given ");
#line 530
testRunner.When("I search using the search term \'actor, bailiff\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 531
 testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle",
                        "JobProfileCategories",
                        "Overview",
                        "CollegeRelevantSubjects",
                        "UniversityRelevantSubjects",
                        "ApprenticeshipRelevantSubjects",
                        "WydDayToDayTasks",
                        "CareerPathAndProgression",
                        "WorkingPattern",
                        "WorkingPatternDetails",
                        "MinimumHours",
                        "MaximumHours",
                        "WorkingHoursDetails"});
            table38.AddRow(new string[] {
                        "Actor",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "managing your own hours",
                        "30",
                        "40",
                        "a week"});
            table38.AddRow(new string[] {
                        "Bailiff",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "freelance / self-employed",
                        "managing your own hours",
                        "30",
                        "40",
                        "a week"});
#line 532
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table38, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
