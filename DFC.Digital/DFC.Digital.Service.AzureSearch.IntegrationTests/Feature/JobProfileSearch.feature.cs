// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFC.Digital.Service.AzureSearch.IntegrationTests.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "JobProfile")]
    public partial class ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature : Xunit.IClassFixture<ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "JobProfileSearch.feature"
#line hidden
        
        public ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature(ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "List job profiles based upon relevance to the \"search term\" entered", "[DFC-31] List job profiles based upon relevance to the \"search term\" entered\r\n[DF" +
                    "C-31 - A1] Job profiles which possess a <Title> or an <AltTitle> which exactly m" +
                    "atches the \"search term\" should be listed first in the list\r\n\t1. <Title> and <Al" +
                    "tTitle> are equivalent in weighting. (i.e. if the term exactly matches either <T" +
                    "itle> or <AltTitle> these are considered equivalent - see [A3])\r\n\t2. The <Title>" +
                    " and <AltTitle> should be unique (i.e. it doesn\'t make sense if the same <Title>" +
                    " or <AltTitle> is used across different profiles - although this isn\'t prohibite" +
                    "d.)\r\n[DFC-31 - A2] Job profiles which possess a <Title> or an <AltTitle> which c" +
                    "ontains the \"search term\" should be listed second in the list\r\n[DFC-31 - A3] Job" +
                    " profiles which satisfy the same condition, to the same level, are not listed in" +
                    " any particular order\r\n\r\n[DFC-164] I want to be able to see Job Profile/s in my " +
                    "search results\r\n\t[DFC-164 - A1] Job profiles which possess a <Title> which exact" +
                    "ly matches the \"search term\" should be listed in the list\r\n\t[DFC-336] Bugfix - U" +
                    "ser uses invalid characters as search term should not see anything\r\n\t[DFC-349] B" +
                    "ugfix - User search by a term that contains more than 50 results\r\n\r\n\t[DFC-167] N" +
                    "avigate using the Next & Previous hyperlinks\r\n\t[DFC-167 - A1] The maximum number" +
                    " of results shown on a page should be limited to the <page limit> (i.e. 10)\r\nCov" +
                    "ered in UI - [DFC-167 - A2] Only display the \"Next\" pagination control if the la" +
                    "st result is NOT shown on the page\r\nCovered in UI - [DFC-167 - A3] Only display " +
                    "the \"Previous\" pagination control if the first result is NOT shown on the page\r\n" +
                    "Covered in UI - [DFC-167 - A4] The \"Next\" pagination control design should match" +
                    " the prototype and contain the following elements: \"Next \" <current page number>" +
                    "+1 \" of \" <total page number>\r\nCovered in UI - [DFC-167 - A5] The \"Previous\" pag" +
                    "ination control design should match the prototype and contain the following elem" +
                    "ents: \"Previous \" <current page number>-1 \" of \" <total page number>\r\nCovered in" +
                    " UI - [DFC-167 - A6] Clicking the \"Next\" pagination control should redirect the " +
                    "user to the next page of the search results\r\nCovered in UI - [DFC-167 - A7] Clic" +
                    "king the \"Previous\" pagination control should redirect the user to the previous " +
                    "page of the search results", ProgrammingLanguage.CSharp, new string[] {
                        "JobProfile"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
            "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
            " (i.e. 10)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
            "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
            " (i.e. 10)")]
        [Xunit.InlineDataAttribute("DFC-167-A1-1-1", "3", new string[0])]
        [Xunit.InlineDataAttribute("DFC-167-A1-1-2", "10", new string[0])]
        public virtual void DFC_167_A1_1TheNumberOfJobProfilesDisplayedEqualsTheTotalNumberOfResultsIfTheTotalNumberOfResultsIsLessThanOrEqualToThePageLimitI_E_10(string searchTerm, string numberOfResults, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-167 - A1 - 1] The number of job profiles displayed equals the <TotalNumberOf" +
                    "Results> if the <TotalNumberOfResults> is less than or equal to the <page limit>" +
                    " (i.e. 10)", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given(string.Format("there are \'{0}\' profiles which have a Title of \'{1}\'", numberOfResults, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the number of job profiles shown on the page is less than or equal to \'10\'. (i.e." +
                    " the page limit)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
            "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
            "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)")]
        [Xunit.InlineDataAttribute("DFC-167-A1-2-1", "11", new string[0])]
        [Xunit.InlineDataAttribute("DFC-167-A1-2-2", "101", new string[0])]
        public virtual void DFC_167_A1_2TheNumberOfJobProfilesDisplayedEqualsThePageLimitIfTheTotalNumberOfResultsIsGreaterThanThePageLimitI_E_10(string searchTerm, string numberOfResults, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-167 - A1 - 2] The number of job profiles displayed equals the <page limit> i" +
                    "f the <TotalNumberOfResults> is greater than the <page limit> (i.e. 10)", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("there are \'{0}\' profiles which have a Title of \'{1}\'", numberOfResults, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the number of job profiles shown on the page is equal to \'10\'. (i.e. the page lim" +
                    "it)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[A1] User uses a search term which contains <Title> on profile(s)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[A1] User uses a search term which contains <Title> on profile(s)")]
        public virtual void A1UserUsesASearchTermWhichContainsTitleOnProfileS()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[A1] User uses a search term which contains <Title> on profile(s)", ((string[])(null)));
#line 86
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table29.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table29.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table29.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table29.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table29.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table29.AddRow(new string[] {
                        "Children nurse",
                        ""});
            table29.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
#line 87
  testRunner.Given("the following job profiles exist:", ((string)(null)), table29, "Given ");
#line 96
  testRunner.When("I search using the search term \'Nurse\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
  testRunner.Then("the result list will contain \'4\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table30.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table30.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table30.AddRow(new string[] {
                        "Children nurse",
                        ""});
            table30.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
#line 98
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
            "ltTitle> on mutliple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
            "ltTitle> on mutliple profiles")]
        public virtual void DFC_31_A1A3_1UserUsesASearchTermWhichExactlyMatchesTitleOrAltTitleOnMutlipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A1, A3 - 1] User uses a search term which exactly matches <Title> or <A" +
                    "ltTitle> on mutliple profiles", ((string[])(null)));
#line 107
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table31.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table31.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician"});
            table31.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table31.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
            table31.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 109
  testRunner.Given("the following job profiles exist:", ((string)(null)), table31, "Given ");
#line 116
  testRunner.When("I search using the search term \'Stagehand\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table32.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician"});
            table32.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
#line 118
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
            "n a single profile")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
            "n a single profile")]
        public virtual void DFC_31_A2_1UserUsesASearchTermWhichIsContainedWithinTheTitleOnASingleProfile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2 - 1] User uses a search term which is contained within the <Title> o" +
                    "n a single profile", ((string[])(null)));
#line 125
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table33.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table33.AddRow(new string[] {
                        "Aerospace engineering technician",
                        ""});
            table33.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 126
  testRunner.Given("the following job profiles exist:", ((string)(null)), table33, "Given ");
#line 131
  testRunner.When("I search using the search term \'Aerospace\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
  testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table34.AddRow(new string[] {
                        "Aerospace engineering technician",
                        ""});
#line 133
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
            "> on a single profile")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
            "> on a single profile")]
        public virtual void DFC_31_A2_2UserUsesASearchTermWhichIsContainedWithinTheAltTitleOnASingleProfile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2 - 2] User uses a search term which is contained within the <AltTitle" +
                    "> on a single profile", ((string[])(null)));
#line 137
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table35.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table35.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician"});
            table35.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 138
  testRunner.Given("the following job profiles exist:", ((string)(null)), table35, "Given ");
#line 143
  testRunner.When("I search using the search term \'Shipbuilding\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
  testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table36.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician"});
#line 145
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table36, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
            "e> on multiple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
            "e> on multiple profiles")]
        public virtual void DFC_31_A2A3_1UserUsesASearchTermWhichIsContainedWithinTheTitleOnMultipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 1] User uses a search term which is contained within the <Titl" +
                    "e> on multiple profiles", ((string[])(null)));
#line 150
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table37.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table37.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table37.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table37.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table37.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 151
  testRunner.Given("the following job profiles exist:", ((string)(null)), table37, "Given ");
#line 158
  testRunner.When("I search using the search term \'Veterinary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table38.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table38.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
#line 160
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table38, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
            "itle> on multiple profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
            "itle> on multiple profiles")]
        public virtual void DFC_31_A2A3_2UserUsesASearchTermWhichIsContainedWithinTheAltTitleOnMultipleProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 2] User uses a search term which is contained within the <AltT" +
                    "itle> on multiple profiles", ((string[])(null)));
#line 165
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table39.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table39.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table39.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table39.AddRow(new string[] {
                        "Zookeeper",
                        "Keeper, animal keeper"});
            table39.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 166
  testRunner.Given("the following job profiles exist:", ((string)(null)), table39, "Given ");
#line 173
  testRunner.When("I search using the search term \'animal\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table40.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table40.AddRow(new string[] {
                        "Zookeeper",
                        "Keeper, animal keeper"});
#line 175
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
            "e> OR <AltTitle> on DIFFERENT profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
            "e> OR <AltTitle> on DIFFERENT profiles")]
        public virtual void DFC_31_A2A3_3UserUsesASearchTermWhichIsContainedWithinTheTitleORAltTitleOnDIFFERENTProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A2, A3 - 3] User uses a search term which is contained within the <Titl" +
                    "e> OR <AltTitle> on DIFFERENT profiles", ((string[])(null)));
#line 180
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table41.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table41.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table41.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End",
                        "",
                        ""});
            table41.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 181
  testRunner.Given("the following job profiles exist:", ((string)(null)), table41, "Given ");
#line 194
  testRunner.When("I search using the search term \'technician\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
  testRunner.Then("the result list will contain \'8\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table42.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table42.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table42.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table42.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 196
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
            "s contained within the <AltTitle> on DIFFERENT profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
            "s contained within the <AltTitle> on DIFFERENT profiles")]
        public virtual void DFC_31_A1A2_1UserUsesASearchTermWhichExactlyMatchesTitleANDIsContainedWithinTheAltTitleOnDIFFERENTProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A1, A2 - 1] User uses a search term which exactly matches <Title> AND i" +
                    "s contained within the <AltTitle> on DIFFERENT profiles", ((string[])(null)));
#line 207
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table43.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table43.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table43.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table43.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
            table43.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
#line 208
  testRunner.Given("the following job profiles exist:", ((string)(null)), table43, "Given ");
#line 215
  testRunner.When("I search using the search term \'counsellor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 216
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table44.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table44.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
#line 217
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table44, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-31 - A1, A2 - 2] User uses a search term which exactly matches <AltTitle> AN" +
            "D is contained within the <Title> on DIFFERENT profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - A1, A2 - 2] User uses a search term which exactly matches <AltTitle> AN" +
            "D is contained within the <Title> on DIFFERENT profiles")]
        public virtual void DFC_31_A1A2_2UserUsesASearchTermWhichExactlyMatchesAltTitleANDIsContainedWithinTheTitleOnDIFFERENTProfiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - A1, A2 - 2] User uses a search term which exactly matches <AltTitle> AN" +
                    "D is contained within the <Title> on DIFFERENT profiles", ((string[])(null)));
#line 222
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table45.AddRow(new string[] {
                        "First Job Profile",
                        "Extra Start"});
            table45.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table45.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table45.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table45.AddRow(new string[] {
                        "CBT practitioners",
                        "Talking therapist, behavioural therapist"});
            table45.AddRow(new string[] {
                        "Speech and language therapy assistant",
                        ""});
            table45.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table45.AddRow(new string[] {
                        "Therapist",
                        "UITest Exact Title"});
            table45.AddRow(new string[] {
                        "UITest Exact AltTitle",
                        "Therapist"});
            table45.AddRow(new string[] {
                        "Vocal Therapist",
                        "UITest Partial Title"});
            table45.AddRow(new string[] {
                        "UITest Partial AltTitle",
                        "Physical therapist"});
#line 226
  testRunner.Given("the following job profiles exist:", ((string)(null)), table45, "Given ");
#line 239
  testRunner.When("I search using the search term \'therapist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
  testRunner.Then("the result list will contain \'7\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table46.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist"});
            table46.AddRow(new string[] {
                        "CBT practitioners",
                        "Talking therapist, behavioural therapist"});
            table46.AddRow(new string[] {
                        "Veterinary physiotherapist",
                        "Animal physiotherapist"});
            table46.AddRow(new string[] {
                        "Therapist",
                        "UITest Exact Title"});
            table46.AddRow(new string[] {
                        "UITest Exact AltTitle",
                        "Therapist"});
            table46.AddRow(new string[] {
                        "Vocal Therapist",
                        "UITest Partial Title"});
            table46.AddRow(new string[] {
                        "UITest Partial AltTitle",
                        "Physical therapist"});
#line 241
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
            " anything")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
            " anything")]
        [Xunit.InlineDataAttribute("*", "10", new string[0])]
        [Xunit.InlineDataAttribute("Nurs?", "4", new string[0])]
        [Xunit.InlineDataAttribute("Nurse^3", "4", new string[0])]
        [Xunit.InlineDataAttribute("+Profile +Job", "6", new string[0])]
        [Xunit.InlineDataAttribute("Nurs~", "4", new string[0])]
        [Xunit.InlineDataAttribute("/[mh]otel/", "2", new string[0])]
        public virtual void DFC_31_B1Bugfix_UserUsesInvalidCharactersAsSearchTermShouldNotSeeAnything(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - B1] Bugfix - User uses invalid characters as search term should not see" +
                    " anything", exampleTags);
#line 275
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table47.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table47.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table47.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table47.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table47.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table47.AddRow(new string[] {
                        "General practitioner (GP)",
                        "Doc"});
            table47.AddRow(new string[] {
                        "Hotel based job",
                        ""});
            table47.AddRow(new string[] {
                        "Motel based job",
                        ""});
#line 276
 testRunner.Given("the following job profiles exist:", ((string)(null)), table47, "Given ");
#line 286
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 287
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
            "m should no longer impact results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
            "m should no longer impact results")]
        [Xunit.InlineDataAttribute("Nurse !Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse - Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse + Veterinary", "5", new string[0])]
        [Xunit.InlineDataAttribute("Nurse OR Profile", "10", new string[0])]
        [Xunit.InlineDataAttribute("Profile && Job", "6", new string[0])]
        [Xunit.InlineDataAttribute("Profile & Job", "6", new string[0])]
        [Xunit.InlineDataAttribute("Profile || Job", "6", new string[0])]
        [Xunit.InlineDataAttribute("Veterinary AND nurse", "10", new string[0])]
        [Xunit.InlineDataAttribute("(GP)", "1", new string[0])]
        [Xunit.InlineDataAttribute("Co-ordinator", "2", new string[0])]
        public virtual void DFC_31_B1_2Bugfix_UserUsesNon_AlphabeticCharactersWithinSearchTermShouldNoLongerImpactResults(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-31 - B1 - 2 ] Bugfix - User uses non-alphabetic characters within search ter" +
                    "m should no longer impact results", exampleTags);
#line 297
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table48.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table48.AddRow(new string[] {
                        "Nurse",
                        "Adult nurse"});
            table48.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table48.AddRow(new string[] {
                        "Veterinary nurse",
                        ""});
            table48.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End"});
            table48.AddRow(new string[] {
                        "General practitioner (GP)",
                        "Doc"});
            table48.AddRow(new string[] {
                        "Hotel based job",
                        ""});
            table48.AddRow(new string[] {
                        "Motel based job",
                        ""});
            table48.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
            table48.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
#line 298
 testRunner.Given("the following job profiles exist:", ((string)(null)), table48, "Given ");
#line 310
testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
            ") is causing \'Server error\'")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
            ") is causing \'Server error\'")]
        [Xunit.InlineDataAttribute("Children\'s", "2", new string[0])]
        public virtual void DFC_1128Bugfix_PerformingASearchWithTextWhichContainsAnApostropheIsCausingServerError(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1128] Bugfix - Performing a search with text which contains an apostrophe (\'" +
                    ") is causing \'Server error\'", exampleTags);
#line 325
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table49.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table49.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
            table49.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
            table49.AddRow(new string[] {
                        "Children nurse",
                        ""});
#line 326
 testRunner.Given("the following job profiles exist:", ((string)(null)), table49, "Given ");
#line 332
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 333
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
            "ver Error\" (A potentially dangerous Request.Form value was detected)")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
            "ver Error\" (A potentially dangerous Request.Form value was detected)")]
        [Xunit.InlineDataAttribute("<Children\'s nurse>", "4", new string[0])]
        public virtual void DFC_340BugfixPerformingASearchWithTextWithinAAndCausesAServerErrorAPotentiallyDangerousRequest_FormValueWasDetected(string searchTerm, string totalCount, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-340] Bugfix Performing a search with text within a \"<\" and \">\" causes a \"Ser" +
                    "ver Error\" (A potentially dangerous Request.Form value was detected)", exampleTags);
#line 338
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table50.AddRow(new string[] {
                        "Extra Start",
                        ""});
            table50.AddRow(new string[] {
                        "Children\'s nurse",
                        ""});
            table50.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle"});
#line 339
 testRunner.Given("the following job profiles exist:", ((string)(null)), table50, "Given ");
#line 344
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 345
  testRunner.Then(string.Format("the result list will contain \'{0}\' profile(s)", totalCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1572] Bugfix - Search term contains \"-\" should return results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1572] Bugfix - Search term contains \"-\" should return results")]
        public virtual void DFC_1572Bugfix_SearchTermContains_ShouldReturnResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1572] Bugfix - Search term contains \"-\" should return results", ((string[])(null)));
#line 350
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table51.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
            table51.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
            table51.AddRow(new string[] {
                        "Last-Job Profile",
                        "Last-Job-Profile"});
#line 351
  testRunner.Given("the following job profiles exist:", ((string)(null)), table51, "Given ");
#line 356
  testRunner.When("I search using the search term \'co-o\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 357
  testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table52.AddRow(new string[] {
                        "Pilot",
                        "Co-Pilot"});
            table52.AddRow(new string[] {
                        "Co-ordinator",
                        "Extra End"});
#line 358
  testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="[DFC-349] Bugfix - User search by a term that contains more than 50 results")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-349] Bugfix - User search by a term that contains more than 50 results")]
        [Xunit.InlineDataAttribute("Everything", "1000", new string[0])]
        public virtual void DFC_349Bugfix_UserSearchByATermThatContainsMoreThan50Results(string searchTerm, string countOfDummies, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-349] Bugfix - User search by a term that contains more than 50 results", exampleTags);
#line 364
 this.ScenarioSetup(scenarioInfo);
#line 365
  testRunner.Given(string.Format("that \'{0}\' job profiles exist with \'{1}\':", countOfDummies, searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 366
  testRunner.When(string.Format("I search using the search term \'{0}\'", searchTerm), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
  testRunner.Then(string.Format("the result count should match \'{0}\'", countOfDummies), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1493 - A1] Partial Match - search and match with Title only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1493 - A1] Partial Match - search and match with Title only")]
        public virtual void DFC_1493_A1PartialMatch_SearchAndMatchWithTitleOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1493 - A1] Partial Match - search and match with Title only", ((string[])(null)));
#line 372
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table53.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
            table53.AddRow(new string[] {
                        "General practitioner (GP)",
                        "Doc"});
#line 373
 testRunner.Given("the following job profiles exist:", ((string)(null)), table53, "Given ");
#line 377
 testRunner.When("I search using the search term \'advis\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 378
 testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table54.AddRow(new string[] {
                        "Money adviser",
                        "Debt counsellor"});
#line 379
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table54, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1493 - A2] Partial Match - search and match with Alternative Title only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1493 - A2] Partial Match - search and match with Alternative Title only")]
        public virtual void DFC_1493_A2PartialMatch_SearchAndMatchWithAlternativeTitleOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1493 - A2] Partial Match - search and match with Alternative Title only", ((string[])(null)));
#line 383
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table55.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
            table55.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician"});
            table55.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician"});
#line 384
 testRunner.Given("the following job profiles exist:", ((string)(null)), table55, "Given ");
#line 389
 testRunner.When("I search using the search term \'manag\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
    testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table56.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager"});
#line 391
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table56, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1493 - A3] Partial Match - search and match with both Title Alternative Titl" +
            "e only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1493 - A3] Partial Match - search and match with both Title Alternative Titl" +
            "e only")]
        public virtual void DFC_1493_A3PartialMatch_SearchAndMatchWithBothTitleAlternativeTitleOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1493 - A3] Partial Match - search and match with both Title Alternative Titl" +
                    "e only", ((string[])(null)));
#line 395
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table57.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table57.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table57.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Last Job Profile",
                        "Extra End",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Therapist",
                        "UITest Exact Title",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Counsellor",
                        "Therapist, psychotherapist",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table57.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 396
 testRunner.Given("the following job profiles exist:", ((string)(null)), table57, "Given ");
#line 410
 testRunner.When("I search using the search term \'techni\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 411
 testRunner.Then("the result list will contain \'8\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table58.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table58.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table58.AddRow(new string[] {
                        "Stagehand",
                        "Stage technician",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "Stage technician",
                        "Stagehand, Stage manager",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "Aerospace engineering technician",
                        "",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "Pharmacy technician",
                        "Pharmaceutical technician",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table58.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 412
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table58, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1493 - A4] Partial Match - search and dont match both Title Alternative Titl" +
            "e only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1493 - A4] Partial Match - search and dont match both Title Alternative Titl" +
            "e only")]
        public virtual void DFC_1493_A4PartialMatch_SearchAndDontMatchBothTitleAlternativeTitleOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1493 - A4] Partial Match - search and dont match both Title Alternative Titl" +
                    "e only", ((string[])(null)));
#line 423
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table59.AddRow(new string[] {
                        "Vocal Therapist",
                        "UITest Partial Title"});
            table59.AddRow(new string[] {
                        "UITest Exact AltTitle",
                        "Therapist"});
            table59.AddRow(new string[] {
                        "UITest Partial AltTitle",
                        "Physical therapist"});
#line 424
 testRunner.Given("the following job profiles exist:", ((string)(null)), table59, "Given ");
#line 429
 testRunner.When("I search using the search term \'Program\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 430
 testRunner.Then("the result count should match \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1635 - A1] Match with data that has single Keyword only")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1635 - A1] Match with data that has single Keyword only")]
        public virtual void DFC_1635_A1MatchWithDataThatHasSingleKeywordOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1635 - A1] Match with data that has single Keyword only", ((string[])(null)));
#line 432
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table60.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table60.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 433
 testRunner.Given("the following job profiles exist:", ((string)(null)), table60, "Given ");
#line 437
 testRunner.When("I search using the search term \'engineerkw\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 438
 testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table61.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 439
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table61, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1635 - A2] Match with data that has multiple Keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1635 - A2] Match with data that has multiple Keywords")]
        public virtual void DFC_1635_A2MatchWithDataThatHasMultipleKeywords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1635 - A2] Match with data that has multiple Keywords", ((string[])(null)));
#line 444
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table62.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
            table62.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
#line 445
 testRunner.Given("the following job profiles exist:", ((string)(null)), table62, "Given ");
#line 449
 testRunner.When("I search using the search term \'nailingtk, technicaltk\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 450
 testRunner.Then("the result list will contain \'1\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table63.AddRow(new string[] {
                        "Nail technician",
                        "",
                        "nailingtk, technicaltk",
                        ""});
#line 451
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table63, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1617 - A1] Fuzzy Search - Match incorrectly spelled term against Title, Alt " +
            "Title and Keyword")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1617 - A1] Fuzzy Search - Match incorrectly spelled term against Title, Alt " +
            "Title and Keyword")]
        public virtual void DFC_1617_A1FuzzySearch_MatchIncorrectlySpelledTermAgainstTitleAltTitleAndKeyword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1617 - A1] Fuzzy Search - Match incorrectly spelled term against Title, Alt " +
                    "Title and Keyword", ((string[])(null)));
#line 456
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table64.AddRow(new string[] {
                        "Middle Job Profile",
                        "Extra Middle",
                        "",
                        ""});
            table64.AddRow(new string[] {
                        "Marine engineering technician",
                        "Shipbuilding technician",
                        "",
                        ""});
            table64.AddRow(new string[] {
                        "Movie operator",
                        "Addition",
                        "Projectionist",
                        ""});
            table64.AddRow(new string[] {
                        "Projectionist",
                        "Operators",
                        "",
                        ""});
            table64.AddRow(new string[] {
                        "Theater operators",
                        "Projectionist, film projector",
                        "",
                        ""});
#line 457
 testRunner.Given("the following job profiles exist:", ((string)(null)), table64, "Given ");
#line 464
 testRunner.When("I search using the search term \'Projeionist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
    testRunner.Then("the result list will contain \'3\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table65.AddRow(new string[] {
                        "Movie operator",
                        "Addition",
                        "Projectionist",
                        ""});
            table65.AddRow(new string[] {
                        "Projectionist",
                        "Operators",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "Theater operators",
                        "Projectionist, film projector",
                        "",
                        ""});
#line 466
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table65, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
            "ults")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
            "ults")]
        public virtual void DFC_1495IWantToSeeAllTheJobCategoriesTheJPIsFoundInInSearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1495] I want to see all the Job Categories the JP is found in, in search res" +
                    "ults", ((string[])(null)));
#line 472
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "JobProfileCategoriesWithUrl"});
            table66.AddRow(new string[] {
                        "A_DFC_1495_Title_One",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryTwoURL|DFC_1495_Cat" +
                            "egoryTwo"});
            table66.AddRow(new string[] {
                        "B_DFC_1495_Title_Two",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryThreeURL|DFC_1495_C" +
                            "ategoryThree"});
            table66.AddRow(new string[] {
                        "C_DFC_1495_Title_Three",
                        "DFC_1495_CategoryTwoURL|DFC_1495_CategoryTwo"});
#line 473
testRunner.Given("the following job profiles exist:", ((string)(null)), table66, "Given ");
#line 478
testRunner.When("I search using the search term \'DFC_1495\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "JobProfileCategoriesWithUrl"});
            table67.AddRow(new string[] {
                        "A_DFC_1495_Title_One",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryTwoURL|DFC_1495_Cat" +
                            "egoryTwo"});
            table67.AddRow(new string[] {
                        "B_DFC_1495_Title_Two",
                        "DFC_1495_CategoryOneURL|DFC_1495_CategoryOne,DFC_1495_CategoryThreeURL|DFC_1495_C" +
                            "ategoryThree"});
            table67.AddRow(new string[] {
                        "C_DFC_1495_Title_Three",
                        "DFC_1495_CategoryTwoURL|DFC_1495_CategoryTwo"});
#line 479
testRunner.Then("the profiles are listed in no specific order:", ((string)(null)), table67, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
            "e\' with equal search weight.")]
        [Xunit.TraitAttribute("FeatureTitle", "List job profiles based upon relevance to the \"search term\" entered")]
        [Xunit.TraitAttribute("Description", "[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
            "e\' with equal search weight.")]
        public virtual void DFC_1987_A1JPIsTaggedByJobProfileSpecialismAndHiddenAlternativeTitleWithEqualSearchWeight_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[DFC-1987 - A1] JP is tagged by \'JobProfileSpecialism\' and \'HiddenAlternativeTitl" +
                    "e\' with equal search weight.", ((string[])(null)));
#line 486
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table68.AddRow(new string[] {
                        "Lift engineer",
                        "Lift technician",
                        "engineerkw",
                        ""});
            table68.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
            table68.AddRow(new string[] {
                        "Technologist",
                        "",
                        "engineerhat",
                        ""});
#line 487
 testRunner.Given("the following job profiles exist:", ((string)(null)), table68, "Given ");
#line 492
testRunner.When("I search using the search term \'engineerhat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 493
 testRunner.Then("the result list will contain \'2\' profile(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle",
                        "JobProfileSpecialism",
                        "HiddenAlternativeTitle"});
            table69.AddRow(new string[] {
                        "Technologist",
                        "",
                        "engineerhat",
                        ""});
            table69.AddRow(new string[] {
                        "Another technician",
                        "",
                        "",
                        "engineerhat"});
#line 494
 testRunner.And("the profiles are listed in no specific order:", ((string)(null)), table69, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ListJobProfilesBasedUponRelevanceToTheSearchTermEnteredFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
