@model DFC.Digital.Web.Sitefinity.ContactUsModule.Mvc.Models.ContactUsViewModel

@Html.Partial("ErrorSummary")
<h1 class="govuk-heading-xl">@Model.PageTitle</h1>
<p class="govuk-body-m">@Html.Raw(Model.PageIntroduction)</p>
<p class="govuk-body-m">@Html.Raw(Model.PageIntroductionTwo)</p>
@using (Html.BeginForm("Index", "YourDetails", FormMethod.Post, new {id = "userform"}))
{
<fieldset class="govuk-fieldset">

    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.Title), ViewData.ModelState)">
        @Html.LabelFor(x => x.PersonalContactDetails.Title, new { @class = "govuk-label" })
        @Html.ValidationMessageFor(x => x.PersonalContactDetails.Title, null, new { @class = "govuk-error-message" })
        @Html.TextBoxFor(x => x.PersonalContactDetails.Title, new { @class = "govuk-input govuk-!-width-two-thirds" })
    </div>

    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.Firstname), ViewData.ModelState)">
        @Html.LabelFor(x => x.PersonalContactDetails.Firstname, new { @class = "govuk-label" })
        @Html.ValidationMessageFor(x => x.PersonalContactDetails.Firstname, null, new { @class = "govuk-error-message" })
        @Html.TextBoxFor(x => x.PersonalContactDetails.Firstname, new { @class = "govuk-input govuk-!-width-two-thirds" })
    </div>

    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.Lastname), ViewData.ModelState)">
        @Html.LabelFor(x => x.PersonalContactDetails.Lastname, new { @class = "govuk-label" })
        @Html.ValidationMessageFor(x => x.PersonalContactDetails.Lastname, null, new { @class = "govuk-error-message" })
        @Html.TextBoxFor(x => x.PersonalContactDetails.Lastname, new { @class = "govuk-input govuk-!-width-two-thirds" })
    </div>

    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.EmailAddress), ViewData.ModelState)">
        @Html.LabelFor(x => x.PersonalContactDetails.EmailAddress, new { @class = "govuk-label" })
        @Html.ValidationMessageFor(x => x.PersonalContactDetails.EmailAddress, null, new { @class = "govuk-error-message" })
        @Html.TextBoxFor(x => x.PersonalContactDetails.EmailAddress, new { @class = "govuk-input govuk-!-width-two-thirds" })
    </div>

    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.ConfirmEmailAddress), ViewData.ModelState)">
        @Html.LabelFor(x => x.PersonalContactDetails.ConfirmEmailAddress, new { @class = "govuk-label" })
        @Html.ValidationMessageFor(x => x.PersonalContactDetails.ConfirmEmailAddress, null, new { @class = "govuk-error-message" })
        @Html.TextBoxFor(x => x.PersonalContactDetails.ConfirmEmailAddress, new { @class = "govuk-input govuk-!-width-two-thirds" })
    </div>
    @if (Model.ShouldAskAgeAndPostcode)
    {
        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.DateOfBirth), ViewData.ModelState)">
            @Html.LabelFor(x => x.PersonalContactDetails.DateOfBirth, new { @class = "govuk-label" })
            <span id="dob-hint" class="govuk-hint">For example, 31 3 1980</span>
            @Html.ValidationMessageFor(x => x.PersonalContactDetails.DateOfBirth, null, new { @class = "govuk-error-message" })
            <div class="govuk-date-input" id="dob">
                <div class="govuk-date-input__item">
                    <div class="govuk-form-group">
                        @Html.LabelFor(x => x.PersonalContactDetails.DateOfBirthDay, new { @class = "govuk-label govuk-date-input__label" })
                        @Html.TextBoxFor(x => x.PersonalContactDetails.DateOfBirthDay, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-day" })
                    </div>
                </div>
                <div class="govuk-date-input__item">
                    <div class="govuk-form-group">
                        @Html.LabelFor(x => x.PersonalContactDetails.DateOfBirthMonth, new { @class = "govuk-label govuk-date-input__label" })
                        @Html.TextBoxFor(x => x.PersonalContactDetails.DateOfBirthMonth, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-month" })
                    </div>
                </div>
                <div class="govuk-date-input__item">
                    <div class="govuk-form-group">
                        @Html.LabelFor(x => x.PersonalContactDetails.DateOfBirthYear, new { @class = "govuk-label govuk-date-input__label" })
                        @Html.TextBoxFor(x => x.PersonalContactDetails.DateOfBirthYear, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-year" })
                    </div>
                </div>
            </div>
        </div>
        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.Postcode), ViewData.ModelState)">
            @Html.LabelFor(x => x.PersonalContactDetails.Postcode, "Post code", new { @class = "govuk-label" })
            <span id="postcode-hint" class="govuk-hint">For example, SW1A 1AA</span>
            @Html.ValidationMessageFor(x => x.PersonalContactDetails.Postcode, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.PersonalContactDetails.Postcode, new { @class = "govuk-input govuk-input--width-10" })
        </div>
    }
    else
    {
        <div class="govuk-form-group">
            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h3 class="govuk-fieldset__heading">
                        Do you want us to contact you?
                    </h3>
                </legend>
                <div class="govuk-radios govuk-radios--inline">
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(model => model.PersonalContactDetails.IsContactable, "True", new { @class = "govuk-radios__input", name = "radio-inline-group", id = "radio-inline-1", @checked = "checked" })
                        @Html.LabelFor(model => model.PersonalContactDetails.IsContactable, "Yes", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(model => model.PersonalContactDetails.IsContactable, "False", new { @class = "govuk-radios__input", name = "radio-inline-group", id = "radio-inline-1" })
                        @Html.LabelFor(model => model.PersonalContactDetails.IsContactable, "No", new { @class = "govuk-label govuk-radios__label" })

                    </div>
                </div>
            </fieldset>
        </div>
    }


    <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PersonalContactDetails.AcceptTermsAndConditions), ViewData.ModelState)">
        <fieldset class="govuk-fieldset">
            <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                <h3 class="govuk-fieldset__heading">
                    Terms and conditions
                </h3>
            </legend>
            @Html.ValidationMessageFor(x => x.PersonalContactDetails.AcceptTermsAndConditions, null, new { @class = "govuk-error-message" })
            <div class="govuk-checkboxes">
                <div class="govuk-checkboxes__item">
                    <input class="govuk-checkboxes__input" id="TermsAndConditions" name="TermsAndConditions" type="checkbox" value="true" @Model.TandCChecked>
                    <label class="govuk-label govuk-checkboxes__label" for="TermsAndConditions">
                        I accept the <a href="https://nationalcareersservice.direct.gov.uk/about-us/terms-and-conditions">terms and conditions</a> and I am 13 or over
                    </label>
                </div>
            </div>
        </fieldset>
    </div>

</fieldset>
    <div class="govuk-form-group">
        <button type="submit" class="govuk-button">
            Send
        </button>
    </div>

    @Html.HiddenFor(x => x.ContactOption)
    @Html.HiddenFor(x => x.ContactAdivserQuestionType)
    @Html.HiddenFor(x => x.Message)
}
