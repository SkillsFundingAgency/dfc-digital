@model ContactUsViewModel
@using DFC.Digital.Web.Core
@using DFC.Digital.Web.Sitefinity.ContactUsModule.Mvc.Models
@using DFC.Digital.Web.Sitefinity.ContactUsModule.RazorHelpers
@using Telerik.Sitefinity.Frontend.Mvc.Helpers

@Html.Script(Html.VersionAssetFile(Url.Content("~/ResourcePackages/gds_service_toolkit/assets/dist/js/jquerybundle.min.js")))


@Html.Partial("ErrorSummary")
<h1 class="govuk-heading-xl">@Model.PageTitle</h1>
<p class="govuk-body-m">@Html.Raw(Model.PageIntroduction)</p>
<p class="govuk-body-m">@Html.Raw(Model.PageIntroductionTwo)</p>
@using (Html.BeginForm("Index", "YourDetails", FormMethod.Post, new { id = "userform" }))
{
    <fieldset class="govuk-fieldset">

        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.FirstName), ViewData.ModelState)">
            @Html.LabelFor(x => x.FirstName, "First name", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.FirstName, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.FirstName, new { @class = "govuk-input govuk-!-width-two-thirds" })
        </div>

        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.LastName), ViewData.ModelState)">
            @Html.LabelFor(x => x.LastName, "Last name", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.LastName, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.LastName, new { @class = "govuk-input govuk-!-width-two-thirds" })
        </div>

        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.Email), ViewData.ModelState)">
            @Html.LabelFor(x => x.Email, "Email Address", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.Email, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.Email, new { @class = "govuk-input govuk-!-width-two-thirds" })
        </div>

        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.EmailConfirm), ViewData.ModelState)">
            @Html.LabelFor(x => x.EmailConfirm, "Confirm email address", new { @class = "govuk-label" })
            @Html.ValidationMessageFor(x => x.EmailConfirm, null, new { @class = "govuk-error-message" })
            @Html.TextBoxFor(x => x.EmailConfirm, new { @class = "govuk-input govuk-!-width-two-thirds" })
        </div>
        @if (Model.ContactOption == ContactOption.ContactAdviser)
        {
            <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.DateOfBirth), ViewData.ModelState)">
                <label class="govuk-label" for="dob-day">
                    Date of birth
                </label>
                <span id="dob-hint" class="govuk-hint">For example, 31 3 1980</span>
                @Html.ValidationMessageFor(x => x.DateOfBirth, null, new { @class = "govuk-error-message" })
                <div class="govuk-date-input" id="dob">
                    <div class="govuk-date-input__item">
                        <div class="govuk-form-group">
                            @Html.LabelFor(x => x.DobDay, "Day", new { @class = "govuk-label govuk-date-input__label" })
                            @Html.TextBoxFor(x => x.DobDay, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-day", pattern = "[0-9]*" })
                        </div>
                    </div>
                    <div class="govuk-date-input__item">
                        <div class="govuk-form-group">
                            @Html.LabelFor(x => x.DobMonth, "Month", new { @class = "govuk-label govuk-date-input__label" })
                            @Html.TextBoxFor(x => x.DobMonth, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-month", pattern = "[0-9]*" })
                        </div>
                    </div>
                    <div class="govuk-date-input__item">
                        <div class="govuk-form-group">
                            @Html.LabelFor(x => x.DobYear, "Year", new { @class = "govuk-label govuk-date-input__label" })
                            @Html.TextBoxFor(x => x.DobYear, new { @class = "govuk-input govuk-date-input__input govuk-input--width-2", type = "number", autocomplete = "bday-year", pattern = "[0-9]*" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.PostCode), ViewData.ModelState)">
                @Html.LabelFor(x => x.PostCode, "Post code", new { @class = "govuk-label" })
                <span id="postcode-hint" class="govuk-hint">For example, SW1A 1AA</span>
                @Html.ValidationMessageFor(x => x.PostCode, null, new { @class = "govuk-error-message" })
                @Html.TextBoxFor(x => x.PostCode, new { @class = "govuk-input govuk-input--width-10" })
            </div>
        }
        else
        {
            <div class="govuk-form-group">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <h2 class="govuk-fieldset__heading">
                            Do you want us to contact you?
                        </h2>
                    </legend>
                    <div class="govuk-radios govuk-radios--inline">
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(model => model.IsContactable, "True", new { @class = "govuk-radios__input", name = "radio-inline-group", id = "radio-inline-1", @checked = "checked" })
                            @Html.LabelFor(model => model.IsContactable, "Yes", new { @class = "govuk-label govuk-radios__label" })
                        </div>
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(model => model.IsContactable, "False", new { @class = "govuk-radios__input", name = "radio-inline-group", id = "radio-inline-1" })
                            @Html.LabelFor(model => model.IsContactable, "No", new { @class = "govuk-label govuk-radios__label" })

                        </div>
                    </div>
                </fieldset>
            </div>
        }


        <div class="govuk-form-group @Html.GetErrorClass(nameof(Model.TermsAndConditions), ViewData.ModelState)">
            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h2 class="govuk-fieldset__heading">
                        Terms and conditions
                    </h2>
                </legend>
                @Html.ValidationMessageFor(x => x.TermsAndConditions, null, new { @class = "govuk-error-message" })
                <div class="govuk-checkboxes">
                    <div class="govuk-checkboxes__item">
                        <input class="govuk-checkboxes__input" id="TermsAndConditions" name="TermsAndConditions" type="checkbox" value="true" @Model.TandCChecked>
                        <label class="govuk-label govuk-checkboxes__label" for="TermsAndConditions">
                            I accept the <a href="https://nationalcareersservice.direct.gov.uk/about-us/terms-and-conditions">terms and conditions</a> and I am 13 or over
                        </label>
                    </div>
                </div>
            </fieldset>
        </div>

    </fieldset>
    <div class="govuk-form-group">
        <button id="formSubmit" type="submit" class="govuk-button">
            Send
        </button>
    </div>

    @Html.HiddenFor(x => x.ContactOption)
    @Html.HiddenFor(x => x.ContactAdivserQuestionType)
    @Html.HiddenFor(x => x.Message)
}
