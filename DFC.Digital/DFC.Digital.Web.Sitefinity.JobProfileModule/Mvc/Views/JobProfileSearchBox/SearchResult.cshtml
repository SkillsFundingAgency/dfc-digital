@model DFC.Digital.Web.Sitefinity.JobProfileModule.Mvc.Models.JobProfileSearchResultViewModel
@using (Html.BeginForm("Search", "JobProfileSearchBox", FormMethod.Post, new { id = "header-search", @class = "js-live-search-form" }))
{
    <div class="search-header">
        <div class="searchfield">
            <div class="search-input ui-front">
                <label for="search-main">
                    <h1 class="search-title">
                        Search results for <span class="visuallyhidden">@Model.SearchTerm</span>
                    </h1>
                </label>
               @Html.TextBoxFor(model => model.SearchTerm, new{ @class = "search-input js-autocomplete",
               @type = "search",
               @id = "search-main",
               @PlaceHolder = Model.PlaceholderText,
               data_autocomplete_minlength = Model.AutoCompleteMinimumCharacters,
               data_autocomplete_maxlength = Model.AutoCompleteMaximumCharacters,
               data_autocomplete_source = "/searchautocomplete",
               data_autocomplete_maxnumberdisplyed = Model.MaximumNumberOfDisplayedSuggestions,
               data_autocomplete_fuzzysearch = Model.UseFuzzyAutoCompleteMatching
               })
            </div>
            <div class="search-submit">
                <button type="submit" class="button">Search</button>
            </div>
        </div>
        <div class="search-dym">
            @if (!string.IsNullOrEmpty(Model.DidYouMeanUrl?.OriginalString))
            {
                <span>
                    Did you mean <a href="@Model.DidYouMeanUrl.OriginalString"> @Model.DidYouMeanTerm </a>
                </span>
            }
        </div>
        <div>
            @if (Model.ShowSearchedTerm)
            {  
                <p id="computed-term">ComputedSearchTerm: @Model.ComputedSearchTerm</p>
            }
        </div>
    </div>
}
<div id="results">
    <div class="results-block">
        <div class="inner-block">
            <div class="result-count">
                @Model.TotalResultsMessage
            </div>
            @if (Model.Count.HasValue && Model.Count > 0)
            {
                <ol class="results-list">
                    @foreach (var jobProfile in Model.SearchResults)
                    {
                    <li class="dfc-code-search-resultitem" data-ga-rank="@jobProfile.Rank">
                        <h3><a class="dfc-code-search-jpTitle" href="@jobProfile.ResultItemUrlName">@jobProfile.ResultItemTitle</a></h3>
                        @if (!string.IsNullOrWhiteSpace(jobProfile.ResultItemAlternativeTitle))
                        {
                            <p class="meta dfc-code-search-jpAltTitle"><span class="sr-hidden">Alternative titles for this job include </span>@jobProfile.ResultItemAlternativeTitle</p>
                        }
                        <p class="result-description dfc-code-search-jpOverview">@jobProfile.ResultItemOverview</p>
                        <p class="results-salary">
                            Salary: <span class="dfc-code-search-jpSalary">
                                @if (string.IsNullOrEmpty(jobProfile.ResultItemSalaryRange))
                                {
                                    @Model.SalaryBlankText
                                }
                                else
                                {
                                    @jobProfile.ResultItemSalaryRange
                                }
                        </span>
                    </p>
                    @if (jobProfile.JobProfileCategoriesWithUrl != null)
                    {<p class="results-categories">
                            Found in:
                            @foreach (var category in jobProfile.JobProfileCategoriesWithUrl)
                            {
                                var title = category.Split('|').First();
                                var url = $"{Model.JobProfileCategoryPage}{category.Split('|').Last()}";
                                <a href="@url">@title</a>
                            }
                        </p>
                    }
                    @if (Model.ShowSearchedTerm)
                    {
                        <p>Score: @jobProfile.Score</p>
                    }
                    </li>
                    }
                </ol>
                <ul class="previous-next-navigation">
                    @if (Model.HasNextPage)
                    {
                        <li class="dfc-code-search-next next">
                            <a class="dfc-code-search-nextlink" href="@Model.NextPageUrl" id="nextBtn">
                                <span class="pagination-label">Next</span>
                                <span class="visuallyhidden">page</span>
                                <span class="page-numbers">@Model.NextPageUrlText</span>
                            </a>
                        </li>
                    }
                    @if (Model.HasPreviousPage)
                    {
                        <li class="dfc-code-search-previous previous">
                            <a class="dfc-code-search-previouslink" href="@Model.PreviousPageUrl" id="prevBtn">
                                <span class="pagination-label">Previous</span>
                                <span class="visuallyhidden">page</span>
                                <span class="page-numbers">@Model.PreviousPageUrlText</span>
                            </a>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>