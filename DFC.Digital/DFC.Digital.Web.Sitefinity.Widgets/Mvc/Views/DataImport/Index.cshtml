@model DFC.Digital.Web.Sitefinity.Widgets.Mvc.Models.DataImportViewModel
    
<div>
    <h1 class="sfBreadCrumb">
        @Html.Raw(Model.PageTitle)
    </h1>
    <div id="workArea" class="sfWorkArea">
        @Html.Raw(Model.ResultText)
        @if (Model.IsAdmin)
    {
        using (Html.BeginForm("Index", "DataImport", FormMethod.Post))
        {
            <div>
                @Html.Raw(Model.InstructionsText)
            </div>
            <div>
                @Html.TextBoxFor(model => model.JobProfileImportDataFile, new { type = "file" }) <br />
                <span id="fileUploadErrorMessage" style="color:red; font-weight:bold;"></span>
            </div>
            <br />
            <div>

                @if (string.IsNullOrEmpty(Model.SourceToDestinationPropertyMapping))
            {
                <span style="color:red;">Please, set the mappings in widget designer if you want the them to persist in next imports or use the field bellow for this transaction only.</span>
        }
        else
        {
            <table width="500" cellpadding="2" cellspacing="2" border="0">
                <thead><tr><th style="font-weight:bolder; text-align:center;">Target</th><th style="font-weight:bolder; text-align:center;">Source</th></tr></thead>
                @{ var mappings = Model.SourceToDestinationPropertyMapping.Split(','); }
                @foreach (var mapping in mappings)
            {
                var keyValue = mapping.Split(':');

                if (keyValue.Length == 2)
                {
                    <tr><td>@keyValue[0].Trim()</td><td>@keyValue[1].Trim()</td></tr>
            }
        }
            </table>
    }
            </div>
            <br />
            <div>
                <span>If you are not happy with the mapping settings above, you can override them bellow:</span><br />
                @Html.TextAreaFor(m => Model.SourceToDestinationPropertyMapping, new { @class = "sfreContentArea" }) <br />
                <span id="SourceTargetErrorMessage" style="color:red; font-weight:bold;"></span>
            </div>
            <br />
            <div class="sfFieldWrp">
                @Html.TextBoxFor(m => Model.ChangeComment) <span>Please, enter here the comment which is going to populate version history notes!</span>
            </div>
            <br />
            <div>
                @Html.CheckBoxFor(m => Model.DisableUpdate) <span> <b>Disable Update</b> In some cases you might want to prevent overwriting existing profiles. <br />(For example in initial import of BAU profiles we might not want to override existing job profiles as they are presumably latest version of what we want public to see.)</span>
            </div>
            <br />
            <div>
                @Html.CheckBoxFor(m => Model.EnforcePublishing) <span>Imported items are going to be saved in DRAFT mode. If you wish to <b>enforce directly PUBLISHING</b> tick the box.</span>
            </div>
            <br />
            <div>
                <input id="btnSubmit" class="submit sfLinkBtn sfSave" type="submit" value="Import Data">
            </div>
    }
}
else
{
    <p>@Model.NotAllowedMessage</p>
}
    </div>
</div>
<script>
    $(document).ready(function () {
        $('form').attr("enctype", "multipart/form-data").attr("encoding", "multipart/form-data");

        $('#btnSubmit').click(function () {

            var jobProfileImportDataFile = $('#JobProfileImportDataFile').val();

            if (jobProfileImportDataFile == "") {
                $('#fileUploadErrorMessage').text('Please, upload CSV file with UrlNames of the JobProfiles you would like to import.');
                return false;
            }
            else {
                if (jobProfileImportDataFile.substring(jobProfileImportDataFile.lastIndexOf('.') + 1).toLowerCase() != "csv") {
                    $('#fileUploadErrorMessage').text('The uploaded file can only be CSV file with extension .csv.');
                    return false;
                }
                else {

                }
            }

            $('#fileUploadErrorMessage').text('');
            return true;
        });

        $("#JobProfileImportDataFile").change(function () {

            var jobProfileImportDataFile = $('#JobProfileImportDataFile').val();

            if (jobProfileImportDataFile == "") {
                $('#fileUploadErrorMessage').text('Please, upload CSV file with UrlNames of the JobProfiles you would like to import.');
                return false;
            }
            else {
                if (jobProfileImportDataFile.substring(jobProfileImportDataFile.lastIndexOf('.') + 1).toLowerCase() != "csv") {
                    $('#fileUploadErrorMessage').text('The uploaded file can only be CSV file with extension .csv.');
                    return false;
                }
                else {

                }
            }

            $('#fileUploadErrorMessage').text('');
            return true;
        });
    });

    // The code bellow is not use. The development of this feature is parked for now
    function ValidateJobProfileImportDataFile() {

        var jobProfileImportDataFile = $('#JobProfileImportDataFile').val();

        if (jobProfileImportDataFile == "") {
            $('#fileUploadErrorMessage').text('Please, upload CSV file with UrlNames of the JobProfiles you would like to import.');
            return false;
        }
        else {
            if (jobProfileImportDataFile.substring(jobProfileImportDataFile.lastIndexOf('.') + 1).toLowerCase() != "csv") {
                $('#fileUploadErrorMessage').text('The uploaded file can only be CSV file with extension .csv.');
                return false;
            }
            else {

            }
        }

        $('#fileUploadErrorMessage').text('');
        return true;
    }

    function ValidateSourceToTargetPropertyMapping() {

        var sourceToDestinationPropertyMapping = $('#SourceToDestinationPropertyMapping').val();

        if (sourceToDestinationPropertyMapping == "") {
            $('#SourceTargetErrorMessage').text('Source-Target Property Mapping is essential the import function to work. Please, provide the mapping in the field above.');
            return false;
        }

        $('#SourceTargetErrorMessage').text('');
        return true;
    }
</script>
<style>
    table {
        border-collapse: collapse;
    }

    table, th, td {
        border: 1px solid black;
    }

        table thead th {
            background-color: gainsboro;
        }
        table td, table th {
            padding: 3px 5px;
        }
</style>